{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,SAAS,EAAuB,CAAG,EAKjC,IAAK,IAJD,EAAS,GACP,EAAU,EAAI,KAAK,CAAC,IAAI,MAAM,CAAC,SAAA,CAArC,EAA6C,OAAA,IAAS,EAAK,WAAW,E,GAChE,EAAU,EAAI,UAAU,CAAC,SAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,KAEpD,EAAI,EAAG,EAAI,EAAQ,MAAM,CAAE,IAClC,GAAU,CAAQ,CAAC,EAAE,CAAG,CAAO,CAAC,EAAE,CAAI,IAGxC,OAAO,EAAO,KAAK,CAAC,EAAG,EAAO,MAAM,CAAG,EACzC,CAIA,IAAK,I,EAFC,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAa,SAAS,gBAAgB,CAAC,iB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,IAEpC,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,IAAK,CACtC,IAAM,EAAQ,SAAS,aAAa,CAAC,SAErC,EAAM,SAAS,CAAC,GAAG,CAAC,eACpB,EAAM,OAAO,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAE5B,EAAM,WAAW,CAAG,EAClB,CAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAG,GAAG,WAAW,GAAK,CAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAGlE,CAAM,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,GAEjC,CAAM,CAAC,EAAE,CAAC,YAAY,CACpB,cACA,EACE,CAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAG,GAAG,WAAW,GAAK,CAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAGtE","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nfunction splitStringPlaceholder(str) {\n    var resStr = \"\";\n    var chunks1 = str.split(\"\").filter(function(item) {\n        return item === item.toUpperCase();\n    });\n    var chunks2 = str.replaceAll(/[A-Z]/g, \" \").slice(1).split(\" \");\n    for(var i = 0; i < chunks1.length; i++)resStr += chunks1[i] + chunks2[i] + \" \";\n    return resStr.slice(0, resStr.length - 1);\n}\nvar inputs = _to_consumable_array(document.querySelectorAll(\".field-text\"));\nfor(var i = 0; i < inputs.length; i++){\n    var label = document.createElement(\"label\");\n    label.classList.add(\"field-label\");\n    label.htmlFor = inputs[i].id;\n    label.textContent = splitStringPlaceholder(inputs[i].name.slice(0, 1).toUpperCase() + inputs[i].name.slice(1));\n    inputs[i].parentNode.appendChild(label);\n    inputs[i].setAttribute(\"placeholder\", splitStringPlaceholder(inputs[i].name.slice(0, 1).toUpperCase() + inputs[i].name.slice(1)));\n}\n\n//# sourceMappingURL=index.973a8c7e.js.map\n","'use strict';\n\nfunction splitStringPlaceholder(str) {\n  let resStr = '';\n  const chunks1 = str.split('').filter(item => item === item.toUpperCase());\n  const chunks2 = str.replaceAll(/[A-Z]/g, ' ').slice(1).split(' ');\n\n  for (let i = 0; i < chunks1.length; i++) {\n    resStr += (chunks1[i] + chunks2[i]) + ' ';\n  }\n\n  return resStr.slice(0, resStr.length - 1);\n}\n\nconst inputs = [...document.querySelectorAll('.field-text')];\n\nfor (let i = 0; i < inputs.length; i++) {\n  const label = document.createElement('label');\n\n  label.classList.add('field-label');\n  label.htmlFor = inputs[i].id;\n\n  label.textContent = splitStringPlaceholder(\n    inputs[i].name.slice(0, 1).toUpperCase() + inputs[i].name.slice(1),\n  );\n\n  inputs[i].parentNode.appendChild(label);\n\n  inputs[i].setAttribute(\n    'placeholder',\n    splitStringPlaceholder(\n      inputs[i].name.slice(0, 1).toUpperCase() + inputs[i].name.slice(1),\n    ),\n  );\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","splitStringPlaceholder","str","resStr","chunks1","split","filter","item","toUpperCase","chunks2","replaceAll","slice","inputs","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","constructor","name","test","_non_iterable_spread","TypeError","label","createElement","classList","add","htmlFor","id","textContent","parentNode","appendChild","setAttribute"],"version":3,"file":"index.973a8c7e.js.map"}